pipeline {
    agent any

    environment {
        AWS_REGION = "us-west-2"
        DOCKER_IMAGE = "dockerid/devopseks_project"
        DOCKER_CREDENTIALS_ID = "docker-credentialsid"
        AWS_CREDENTIALS_ID = "awscredentialsid"
        KUBECONFIG_FILE = "$HOME/.kube/config"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/deepakkishor15/DevopsEKS_project.git'
            }
        }

        stage('Install Dependencies & Run Tests') {
            steps {
                sh '''#!/bin/bash
                    set -e
                    python3 -m venv venv
                    . venv/bin/activate
                    pip install -r requirements.txt
                    pytest || true  # Allow pipeline to continue even if tests fail
                '''
            }
        }

        stage('Build & Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh '''#!/bin/bash
                        set -x  # Print commands for debugging
                        docker --version
                        echo "Logging in to Docker Hub..."
                        echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin || { echo "Docker login failed"; exit 1; }
                        
                        echo "Building Docker image..."
                        docker build -t $DOCKER_IMAGE:latest . || { echo "Docker build failed"; exit 1; }
                        
                        echo "Pushing Docker image..."
                        docker push $DOCKER_IMAGE:latest || { echo "Docker push failed"; exit 1; }
                        
                        echo "Docker build and push completed successfully"
                    '''
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: AWS_CREDENTIALS_ID]]) {
                    sh '''#!/bin/bash
                        set -x  # Print commands for debugging
                        
                        echo "Setting up Kubernetes configuration..."
                        export KUBECONFIG=$KUBECONFIG_FILE
                        
                        echo "Updating kubeconfig for EKS cluster..."
                        aws eks --region $AWS_REGION update-kubeconfig --name my-eks-cluster || { echo "Failed to update kubeconfig"; exit 1; }
                        
                        echo "Applying Kubernetes deployment..."
                        kubectl apply -f k8s/deployment.yaml || { echo "Failed to apply deployment"; exit 1; }
                        
                        echo "Applying Kubernetes service..."
                        kubectl apply -f k8s/service.yaml || { echo "Failed to apply service"; exit 1; }
                        
                        echo "Kubernetes deployment completed successfully"
                    '''
                }
            }
        }
    }

    post {
        success {
            echo "Pipeline executed successfully!"
        }
        failure {
            echo "Pipeline failed! Check logs for errors."
        }
    }
}