pipeline {
    agent any
    
    environment {
        DOCKER_HUB_REPO = "deepak158/flask-app"  // Change to your Docker Hub repo
        AWS_REGION = "us-east-1"  // Update to your AWS region
        EKS_CLUSTER_NAME = "your-eks-cluster"  // Update to your EKS cluster name
        NAMESPACE = "flask-app"  // Change if needed
    }
    
    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/deepakkishor15/DevopsEKS_project.git'
            }
        }
        
        stage('Install Dependencies & Run Tests') {
            steps {
                sh '''
                # Use bash explicitly to avoid "source: not found" error
                python3 -m venv venv
                . venv/bin/activate  # Correct way in 'sh'
                pip install -r requirements.txt
                pytest || echo "Tests failed but continuing deployment"
                '''
            }
        }
        
        stage('Build Docker Image') {
            steps {
                sh """
                docker build -t ${env.DOCKER_HUB_REPO}:${env.BUILD_NUMBER} .
                docker tag ${env.DOCKER_HUB_REPO}:${env.BUILD_NUMBER} ${env.DOCKER_HUB_REPO}:latest
                """
            }
        }
        
        stage('Push to Docker Hub') {
            steps {
                withCredentials([string(credentialsId: 'docker-hub-token', variable: 'DOCKER_HUB_TOKEN')]) {
                    sh """
                    echo ${DOCKER_HUB_TOKEN} | docker login -u ${env.DOCKER_HUB_REPO.split('/')[0]} --password-stdin
                    docker push ${env.DOCKER_HUB_REPO}:${env.BUILD_NUMBER}
                    docker push ${env.DOCKER_HUB_REPO}:latest
                    """
                }
            }
        }
        
        stage('Deploy to EKS') {
            steps {
                withAWS(region: "${env.AWS_REGION}", credentials: 'aws-credentials') {
                    sh """
                    aws eks update-kubeconfig --name ${env.EKS_CLUSTER_NAME} --region ${env.AWS_REGION}
                    
                    # Apply Kubernetes manifests
                    sed -i 's|IMAGE_NAME_PLACEHOLDER|${env.DOCKER_HUB_REPO}:${env.BUILD_NUMBER}|g' kubernetes/deployment.yaml
                    kubectl apply -f kubernetes/namespace.yaml || echo 'Namespace already exists'
                    kubectl apply -f kubernetes/deployment.yaml
                    kubectl apply -f kubernetes/service.yaml
                    """
                }
            }
        }
    }
    
    post {
        always {
            sh """
            docker rmi -f ${env.DOCKER_HUB_REPO}:${env.BUILD_NUMBER} || true
            docker rmi -f ${env.DOCKER_HUB_REPO}:latest || true
            cleanWs()
            """
        }
    }
}
