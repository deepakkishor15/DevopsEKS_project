pipeline {
    agent any

    environment {
        DOCKER_HUB_REPO = "deepak158/flask-app"
        AWS_REGION = "us-west-2"
        EKS_CLUSTER_NAME = "sample-EKS"
        NAMESPACE = "flask-app"
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/deepakkishor15/DevopsEKS_project.git'
            }
        }

        stage('Install Dependencies & Run Tests') {
            steps {
                sh '''
                set -e
                python3 -m venv venv
                source venv/bin/activate
                pip install -r requirements.txt
                pytest || exit 1
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                sh """
                docker build -t ${DOCKER_HUB_REPO}:${BUILD_NUMBER} .
                docker tag ${DOCKER_HUB_REPO}:${BUILD_NUMBER} ${DOCKER_HUB_REPO}:latest
                """
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-credentialsid', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_HUB_TOKEN')]) {
                    sh """
                    echo ${DOCKER_HUB_TOKEN} | docker login -u ${DOCKER_USER} --password-stdin
                    docker push ${DOCKER_HUB_REPO}:${BUILD_NUMBER}
                    docker push ${DOCKER_HUB_REPO}:latest
                    """
                }
            }
        }

        stage('Validate Kubernetes Cluster & Manifests') {
            steps {
                withAWS(region: "${AWS_REGION}", credentials: 'awscredentialsid') {
                    sh """
                    # Validate EKS Cluster
                    if ! aws eks describe-cluster --name ${EKS_CLUSTER_NAME} --region ${AWS_REGION} --query "cluster.status" --output text | grep -q "ACTIVE"; then
                        echo "EKS Cluster ${EKS_CLUSTER_NAME} not found or not active!"
                        exit 1
                    fi

                    # Update kubeconfig
                    aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME} --region ${AWS_REGION}

                    # Validate Namespace
                    if ! kubectl get namespace ${NAMESPACE} > /dev/null 2>&1; then
                        echo "Namespace ${NAMESPACE} does not exist. Creating it..."
                        kubectl create namespace ${NAMESPACE}
                    fi

                    # Validate Deployment YAML
                    if ! kubectl apply --dry-run=client -f kubernetes/deployment.yaml; then
                        echo "Deployment YAML is invalid!"
                        exit 1
                    fi

                    echo "Validation successful. Proceeding to deployment..."
                    """
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                withAWS(region: "${AWS_REGION}", credentials: 'awscredentialsid') {
                    sh """
                    # Replace image in deployment.yaml
                    export IMAGE_NAME="${DOCKER_HUB_REPO}:${BUILD_NUMBER}"
                    envsubst < kubernetes/deployment.yaml > kubernetes/deployment-updated.yaml

                    # Apply Kubernetes Manifests
                    kubectl apply -f kubernetes/namespace.yaml || echo 'Namespace already exists'
                    kubectl apply -f kubernetes/deployment-updated.yaml
                    kubectl apply -f kubernetes/service.yaml

                    # Wait for Deployment to Rollout Successfully
                    kubectl rollout status deployment/flask-app -n ${NAMESPACE} --timeout=120s
                    """
                }
            }
        }
    }

    post {
        always {
            script {
                try {
                    sh """
                    docker rmi -f ${DOCKER_HUB_REPO}:${BUILD_NUMBER} || true
                    docker rmi -f ${DOCKER_HUB_REPO}:latest || true
                    docker image prune -af || true
                    """
                } catch (Exception e) {
                    echo "Error during cleanup: ${e}"
                }
            }
            cleanWs()
        }
    }
}
