pipeline {
    agent any

    environment {
        DOCKER_HUB_REPO = "deepak158/flask-app"  // Update your Docker Hub repo
        AWS_REGION = "us-west-2"  // Update your AWS region
        EKS_CLUSTER_NAME = "sample-EKS"  // Update to match your EKS cluster
        NAMESPACE = "flask-app"  // Change namespace if needed
        KUBECONFIG_PATH = "/home/ubuntu/config"  // Ensure the kubeconfig path is correct
    }

    stages {
        stage('Cleanup Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/deepakkishor15/DevopsEKS_project.git'
            }
        }

        stage('Install Dependencies & Run Tests') {
            steps {
                sh '''
                set -e
                python3 -m venv venv
                source venv/bin/activate
                pip install -r requirements.txt
                pytest
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                sh """
                docker build -t ${DOCKER_HUB_REPO}:${BUILD_NUMBER} .
                docker tag ${DOCKER_HUB_REPO}:${BUILD_NUMBER} ${DOCKER_HUB_REPO}:latest
                """
            }
        }

        stage('Push to Docker Hub') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-credentialsid', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_HUB_TOKEN')]) {
                    sh """
                    echo ${DOCKER_HUB_TOKEN} | docker login -u ${DOCKER_USER} --password-stdin
                    docker push ${DOCKER_HUB_REPO}:${BUILD_NUMBER}
                    docker push ${DOCKER_HUB_REPO}:latest
                    docker logout
                    """
                }
            }
        }

        stage('Validate Kubernetes Cluster & Manifests') {
            steps {
                withAWS(region: "${AWS_REGION}", credentials: 'awscredentialsid') {
                    sh """
                    echo "Checking EKS Cluster Status..."
                    if ! aws eks describe-cluster --name ${EKS_CLUSTER_NAME} --region ${AWS_REGION} --query "cluster.status" --output text | grep -q "ACTIVE"; then
                        echo "EKS Cluster ${EKS_CLUSTER_NAME} is not active!"
                        exit 1
                    fi

                    echo "Updating kubeconfig..."
                    aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME} --region ${AWS_REGION}

                    echo "Validating Kubernetes manifests..."
                    kubectl apply --dry-run=client -f kubernetes/deployment.yaml
                    kubectl apply --dry-run=client -f kubernetes/service.yaml
                    """
                }
            }
        }

        stage('Deploy to EKS') {
            steps {
                withAWS(region: "${AWS_REGION}", credentials: 'awscredentialsid') {
        
